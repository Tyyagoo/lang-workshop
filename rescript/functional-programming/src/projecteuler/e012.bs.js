// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_int32 = require("rescript/lib/js/caml_int32.js");

function sumAllBelow(n) {
  var _sum = 0;
  var _n = n;
  while(true) {
    var n$1 = _n;
    var sum = _sum;
    if (n$1 === 0) {
      return sum;
    }
    _n = n$1 - 1 | 0;
    _sum = sum + n$1 | 0;
    continue ;
  };
}

function makeDivisorsArray(n) {
  var _arr = [];
  var _div = 1;
  var _count = 0;
  while(true) {
    var count = _count;
    var div = _div;
    var arr = _arr;
    if (div > n) {
      return [
              arr,
              count
            ];
    }
    var m = Caml_int32.mod_(n, div);
    var a = m === 0 ? Belt_Array.concat(arr, [div]) : arr;
    var c = m === 0 ? count + 1 | 0 : count;
    _count = c;
    _div = div + 1 | 0;
    _arr = a;
    continue ;
  };
}

function makeTriangularNumber(i) {
  var n = sumAllBelow(i + 1 | 0);
  var match = makeDivisorsArray(n);
  return {
          number: n,
          divisors: match[0],
          length: match[1]
        };
}

function findTriangularWithDivisors(divisors_count) {
  var _n = 12300;
  while(true) {
    var n = _n;
    var number = makeTriangularNumber(n);
    console.log(String(number.number) + " -> " + String(number.length));
    if (number.length > divisors_count) {
      return number;
    }
    _n = n + 1 | 0;
    continue ;
  };
}

var n = findTriangularWithDivisors(500);

console.log("Number found!!!");

console.log(n);

exports.sumAllBelow = sumAllBelow;
exports.makeDivisorsArray = makeDivisorsArray;
exports.makeTriangularNumber = makeTriangularNumber;
exports.findTriangularWithDivisors = findTriangularWithDivisors;
exports.n = n;
/* n Not a pure module */
