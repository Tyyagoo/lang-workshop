// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_int32 = require("rescript/lib/js/caml_int32.js");

function intExp(a, b) {
  return Math.pow(a, b) | 0;
}

function generateArray(n) {
  return Belt_Array.makeBy(n - 1 | 0, (function (i) {
                return {
                        value: i + 2 | 0,
                        tag: false
                      };
              }));
}

function makeStep(arr, a) {
  return Belt_Array.forEach(arr, (function (n) {
                if (n.tag || !(n.value >= (Math.pow(a, 2) | 0) && Caml_int32.mod_(n.value, a) === 0)) {
                  return ;
                } else {
                  n.tag = true;
                  return ;
                }
              }));
}

function tagNonPrimes(limit) {
  var _i = 0;
  var array = generateArray(limit - 1 | 0);
  while(true) {
    var i = _i;
    var p = Belt_Array.getExn(array, i);
    console.log(p);
    if ((Math.pow(p.value, 2) | 0) > limit) {
      return array;
    }
    if (!p.tag) {
      makeStep(array, p.value);
    }
    _i = i + 1 | 0;
    continue ;
  };
}

function selectPrimes(arr) {
  return Belt_Array.keepMap(arr, (function (v) {
                if (v.tag) {
                  return ;
                } else {
                  return v.value;
                }
              }));
}

var taggedNumbers = tagNonPrimes(2000000);

var primes = Belt_Array.map(selectPrimes(taggedNumbers), (function (n) {
        return n;
      }));

var sum = Belt_Array.reduce(primes, 0, (function (a, b) {
        return a + b;
      }));

console.log(sum);

var threshold = 2000000;

exports.threshold = threshold;
exports.intExp = intExp;
exports.generateArray = generateArray;
exports.makeStep = makeStep;
exports.tagNonPrimes = tagNonPrimes;
exports.selectPrimes = selectPrimes;
exports.taggedNumbers = taggedNumbers;
exports.primes = primes;
exports.sum = sum;
/* taggedNumbers Not a pure module */
