// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_int32 = require("rescript/lib/js/caml_int32.js");

function intExp(a, b) {
  return Math.pow(a, b) | 0;
}

function generateArray(n) {
  return Belt_Array.makeBy(n - 1 | 0, (function (i) {
                return {
                        value: i + 2 | 0,
                        tag: false
                      };
              }));
}

function makeStep(arr, a) {
  return Belt_Array.forEach(arr, (function (n) {
                if (n.tag || !(n.value >= (Math.pow(a, 2) | 0) && Caml_int32.mod_(n.value, a) === 0)) {
                  return ;
                } else {
                  n.tag = true;
                  return ;
                }
              }));
}

function generatePrimes(n, l) {
  console.log("Generating primes...");
  var loop = function (arr, _i) {
    while(true) {
      var i = _i;
      console.log(" - " + String(i) + "th iteration");
      if (i >= l) {
        return arr;
      }
      var v = Belt_Array.get(arr, i);
      if (v === undefined) {
        return arr;
      }
      makeStep(arr, v.value);
      _i = i + 1 | 0;
      continue ;
    };
  };
  return Belt_Array.keepMap(loop(generateArray(n), 0), (function (n) {
                if (n.tag) {
                  return ;
                } else {
                  return n.value;
                }
              }));
}

function findNthPrime(n) {
  var primes = generatePrimes(1000005, n + 1 | 0);
  console.log("Finding the " + String(n) + "th prime...");
  var v = Belt_Array.get(primes, n - 1 | 0);
  if (v !== undefined) {
    return v;
  } else {
    return -1;
  }
}

console.log(findNthPrime(10001));

var threshold = 1000005;

exports.threshold = threshold;
exports.intExp = intExp;
exports.generateArray = generateArray;
exports.makeStep = makeStep;
exports.generatePrimes = generatePrimes;
exports.findNthPrime = findNthPrime;
/*  Not a pure module */
