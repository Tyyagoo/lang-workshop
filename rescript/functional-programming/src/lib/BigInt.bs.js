// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_format = require("rescript/lib/js/caml_format.js");
var Belt_MutableStack = require("rescript/lib/js/belt_MutableStack.js");

function is_numerical(str) {
  var regex = new RegExp("^[0-9]+$");
  var match = str.match(regex);
  if (match !== null) {
    return true;
  } else {
    console.log(str + " isn't a number.");
    return false;
  }
}

function format(_arr) {
  while(true) {
    var arr = _arr;
    var v = Belt_Array.get(arr, 0);
    if (v === undefined) {
      return ["0"];
    }
    if (v !== "0") {
      return arr;
    }
    _arr = Belt_Array.sliceToEnd(arr, 1);
    continue ;
  };
}

function string_arr_to_int_stack(arr) {
  var stack = Belt_MutableStack.make(undefined);
  var length = arr.length;
  var loop = function (_i) {
    while(true) {
      var i = _i;
      if (i === length) {
        return ;
      }
      var v = Belt_Array.get(arr, i);
      var element = v !== undefined ? Caml_format.caml_int_of_string(v) : 0;
      Belt_MutableStack.push(stack, element);
      _i = i + 1 | 0;
      continue ;
    };
  };
  loop(0);
  return stack;
}

var Helper = {
  is_numerical: is_numerical,
  format: format,
  string_arr_to_int_stack: string_arr_to_int_stack
};

var zero_value = ["0"];

var zero = {
  value: zero_value,
  length: 1
};

var Constants = {
  zero: zero
};

function of_string(str) {
  if (!is_numerical(str)) {
    return {
            value: ["NaN"],
            length: 1
          };
  }
  var arr = format(str.split(""));
  return {
          value: arr,
          length: arr.length
        };
}

function to_string(val) {
  return Belt_Array.reduce(val.value, "", (function (r, a) {
                return r + a;
              }));
}

function add($$this, other) {
  var len = (
    $$this.length > other.length ? $$this.length : other.length
  ) + 1 | 0;
  var arr = Belt_Array.make(len, "0");
  var t_stack = string_arr_to_int_stack($$this.value);
  var o_stack = string_arr_to_int_stack(other.value);
  var loop = function (_i, _carry) {
    while(true) {
      var carry = _carry;
      var i = _i;
      if (i === len) {
        return ;
      }
      var v = Belt_MutableStack.pop(t_stack);
      var x = v !== undefined ? v : 0;
      var v$1 = Belt_MutableStack.pop(o_stack);
      var y = v$1 !== undefined ? v$1 : 0;
      var v_carry = carry ? 1 : 0;
      var result = (x + y | 0) + v_carry | 0;
      Belt_Array.set(arr, (len - i | 0) - 1 | 0, String(result % 10));
      _carry = (result / 10 | 0) !== 0;
      _i = i + 1 | 0;
      continue ;
    };
  };
  loop(0, false);
  var arr$1 = format(arr);
  return {
          value: arr$1,
          length: arr$1.length
        };
}

exports.Helper = Helper;
exports.Constants = Constants;
exports.of_string = of_string;
exports.to_string = to_string;
exports.add = add;
/* No side effect */
